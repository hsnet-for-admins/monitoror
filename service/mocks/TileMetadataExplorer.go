// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/monitoror/monitoror/api/config/models"
	monitorormodels "github.com/monitoror/monitoror/models"
	mock "github.com/stretchr/testify/mock"

	registry "github.com/monitoror/monitoror/service/registry"
)

// TileMetadataExplorer is an autogenerated mock type for the TileMetadataExplorer type
type TileMetadataExplorer struct {
	mock.Mock
}

// GetMinimalVersion provides a mock function with given fields:
func (_m *TileMetadataExplorer) GetMinimalVersion() models.RawVersion {
	ret := _m.Called()

	var r0 models.RawVersion
	if rf, ok := ret.Get(0).(func() models.RawVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.RawVersion)
	}

	return r0
}

// GetVariant provides a mock function with given fields: variantName
func (_m *TileMetadataExplorer) GetVariant(variantName monitorormodels.VariantName) (registry.VariantMetadataExplorer, bool) {
	ret := _m.Called(variantName)

	var r0 registry.VariantMetadataExplorer
	if rf, ok := ret.Get(0).(func(monitorormodels.VariantName) registry.VariantMetadataExplorer); ok {
		r0 = rf(variantName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.VariantMetadataExplorer)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(monitorormodels.VariantName) bool); ok {
		r1 = rf(variantName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetVariantsNames provides a mock function with given fields:
func (_m *TileMetadataExplorer) GetVariantsNames() []monitorormodels.VariantName {
	ret := _m.Called()

	var r0 []monitorormodels.VariantName
	if rf, ok := ret.Get(0).(func() []monitorormodels.VariantName); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]monitorormodels.VariantName)
		}
	}

	return r0
}
